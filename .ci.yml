# Copyright (C) 2022 Antmicro
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

image: $DOCKER_IMAGE

stages:
- build_and_unit_test
- create_matrix
- test_run

variables:
  GITLAB_MATRIX_PATH: matrix-gitlab.json

.install-build-deps: &install-build-deps
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
  - export DEBIAN_FRONTEND=noninteractive
  - apt -qqy update
  - apt -y install wget gzip capnproto libcapnp-dev curl build-essential
  - cp ./third_party/capnproto-java/compiler/src/main/schema/capnp/java.capnp /usr/include/capnp/java.capnp
  - curl https://sh.rustup.rs -sSf | sh -s -- -y
  - source $HOME/.cargo/env

build_debug:
  stage: build_and_unit_test
  <<: *install-build-deps
  script:
  - cargo build
  artifacts:
    paths: [target/debug/nisp]

build_release:
  stage: build_and_unit_test
  <<: *install-build-deps
  script:
  - cargo build --release
  artifacts:
    paths: [target/release/nisp]

unit_test:
  stage: build_and_unit_test
  <<: *install-build-deps
  script:
  - cargo test

.test-run-devices: &test-run-devices
- xczu7ev
- xc7a35t

.nisp-artifacts: &nisp-artifacts
- jsons/*.json
- dots/*.dot

create_matrix:
  stage: create_matrix
  before_script:
  - export DEBIAN_FRONTEND=noninteractive
  - apt -qqy update
  - apt install -y python3
  script:
  - python3 ci/generate_matrix.py gitlab ci/matrix.json
  artifacts:
    paths: [$GITLAB_MATRIX_PATH]

test_run:
  stage: test_run
  parallel: 4 # build-type count * device count
  before_script:
  - export DEBIAN_FRONTEND=noninteractive
  - apt -qqy update
  - apt install -y wget xz-utils python3
  
  - export BUILD_TYPE=`python3 ci/gitlab_get_matrix_config.py ${CI_NODE_INDEX} build_type`
  - export DEVICE=`python3 ci/gitlab_get_matrix_config.py ${CI_NODE_INDEX} device`

  - mkdir downloads
  - wget https://storage.googleapis.com/fpga-interchange-tests/artifacts/prod/foss-fpga-tools/fpga-interchange-tests/continuous/install/20221027-095221/interchange-$DEVICE-35e0d7e.tar.xz -O downloads/$DEVICE.tar.xz
  - tar -xvf downloads/${DEVICE}.tar.xz ${DEVICE}/${DEVICE}.device
  - rm downloads/${DEVICE}.tar.xz

  - |
    if [[ "$BUILD_TYPE" == "debug" ]]; then
      gzip -d -c ${DEVICE}/${DEVICE}.device > ${DEVICE}/${DEVICE}.device.raw
    fi
  
  - mkdir jsons
  - mkdir dots

  script:
  - export BUILD_TYPE=`python3 ci/gitlab_get_matrix_config.py ${CI_NODE_INDEX} build_type`
  - export DEVICE=`python3 ci/gitlab_get_matrix_config.py ${CI_NODE_INDEX} device`
  - echo "Running NISP in ${BUILD_TYPE} mode for ${DEVICE} device."
  - |
    if [[ "$BUILD_TYPE" == "debug" ]]; then
        ./target/debug/nisp ${DEVICE}/${DEVICE}.device.raw ${DEVICE}_nisp.bba --raw --threads `nproc` --json-prefix jsons --json :all --dot-prefix dots --dot :all
    elif [[ "$BUILD_TYPE" == "release" ]]; then
        ./target/release/nisp ${DEVICE}/${DEVICE}.device ${DEVICE}_nisp.bba --threads `nproc` --json-prefix jsons --json :all --dot-prefix dots --dot :all
    fi
  
  artifacts:
    paths: *nisp-artifacts
