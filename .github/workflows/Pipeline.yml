# Copyright (C) 2022 Antmicro
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

name: Pipeline

on:
  workflow_call:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  LANG: en_US.UTF-8
  DEBIAN_FRONTEND: noninteractive
  CARGO_TERM_COLOR: always

jobs:
  Build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        build_type:
        - debug
        - release
    
    name: Build (${{ matrix.build_type }})
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt -qqy update
        sudo apt -y install wget gzip capnproto libcapnp-dev
        sudo cp ./third_party/capnproto-java/compiler/src/main/schema/capnp/java.capnp /usr/include/capnp/java.capnp
    
    - name: Install Rust
      run: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y
        source $HOME/.cargo/env
    
    - name: Build (debug)
      if: matrix.build_type == 'debug'
      run: cargo build
    
    - name: Build (release)
      if: matrix.build_type == 'release'
      run: cargo build --release

    - name: Upload build
      uses: actions/upload-artifact@v3
      with:
        name: nisp-${{ matrix.build_type }}
        path: target/${{ matrix.build_type }}/nisp
  
  Unit-Tests:
    runs-on: ubuntu-latest
    
    name: Unit tests
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt -qqy update
        sudo apt -y install wget gzip capnproto libcapnp-dev
        sudo cp ./third_party/capnproto-java/compiler/src/main/schema/capnp/java.capnp /usr/include/capnp/java.capnp
    
    - name: Install Rust
      run: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y
        source $HOME/.cargo/env
    
    - name: Test
      run: cargo test
  
  generate_matrix:
    runs-on: ubuntu-latest

    name: Generate Matrix

    outputs:
      matrix: ${{ steps.matrix_gen.outputs.matrix }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: matrix_gen
        name: Generate Matrix
        run: |
          python3 ./ci/generate_matrix.py github ci/matrix.json
          cat $GITHUB_OUTPUT

  Test-Run:
    needs: [Build, generate_matrix]

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate_matrix.outputs.matrix) }}
    
    name: Test run (${{ matrix.build_type }} | ${{ matrix.device }})

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Install dependencies (release)
      if: matrix.build_type == 'release'
      run: |
        sudo apt -qqy update
        sudo apt -y install wget
    
    - name: Install dependencies (debug)
      if: matrix.build_type == 'debug'
      run: |
        sudo apt -qqy update
        sudo apt -y install wget gzip tar
    
    - name: Download build
      uses: actions/download-artifact@v3
      with:
        name: nisp-${{ matrix.build_type }}

    - name: Get device file
      run: bash ci/download_device.sh ${{ matrix.device }}
    
    - name: Decompress device file
      if: matrix.build_type == 'debug'
      run: gzip -d -c ${{ matrix.device }}/${{ matrix.device }}.device > ${{ matrix.device }}/${{ matrix.device }}.device.raw
    
    - name: Full run
      run: |
        chmod +x ./nisp
        bash ci/full_run.sh ${{ matrix.build_type }} ${{ matrix.device }}
